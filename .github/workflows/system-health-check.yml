name: 🩺 System Health Check

permissions:
  contents: read

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  TZ: UTC

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PYTHONUNBUFFERED: 1
      GITHUB_ACTIONS: 'true'
      SMARTSHEET_API_TOKEN: ${{ secrets.SMARTSHEET_API_TOKEN }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Verify secrets presence
        run: |
          if [ -z "${SMARTSHEET_API_TOKEN}" ]; then
            echo "ERROR: SMARTSHEET_API_TOKEN secret not available to the job.";
            exit 1;
          fi
          echo "SMARTSHEET_API_TOKEN is present (value not echoed)."
          if [ -n "${SENTRY_DSN}" ]; then
            echo "SENTRY_DSN provided.";
          else
            echo "SENTRY_DSN not set (continuing).";
          fi
      
      - name: Run system health check
        run: python validate_system_health.py
      
      - name: Upload system health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: system-health-report-${{ github.run_number }}
            path: generated_docs/system_health.json
            retention-days: 30
      
      - name: Evaluate health status
        if: always()
        run: |
          if [ -f generated_docs/system_health.json ]; then
            echo "Health report:";
            cat generated_docs/system_health.json;
            status=$(python - <<'PYCODE'
import json
with open('generated_docs/system_health.json') as f:
    data = json.load(f)
print(data.get('overall_status','UNKNOWN'))
PYCODE
)
            echo "Overall status: $status";
            if [ "$status" = "CRITICAL" ]; then
              echo "❌ System health is CRITICAL";
              exit 1;
            elif [ "$status" = "WARN" ]; then
              echo "⚠️ System health has warnings";
            else
              echo "✅ System health OK";
            fi
          else
            echo "No health report generated";
            exit 1;
          fi
      
      - name: Summary
        if: always()
        run: |
          echo "System health check completed (see prior step for evaluation)."