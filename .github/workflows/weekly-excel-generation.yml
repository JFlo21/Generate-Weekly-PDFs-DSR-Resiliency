name: Weekly Excel Generation with Sentry Monitoring (Every 2 Hours + Weekly)

permissions:
  contents: read

on:
  schedule:
    - cron: '0 13,15,17,19,21,23,1 * * 1-5'
    - cron: '0 15,19,23 * * 0,6'
    - cron: '0 5 * * 1'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (true/false)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      force_generation:
        description: 'Force generate even if no eligible data'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      cleanup_only:
        description: 'Only cleanup stale Excel files (no generation)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']

env:
  TZ: America/Chicago

jobs:
  core:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONUNBUFFERED: 1
      GITHUB_ACTIONS: 'true'
      SKIP_CELL_HISTORY: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Determine execution type
        id: exec
        run: |
          day=$(TZ=America/Chicago date +%w)
          hour=$(TZ=America/Chicago date +%H)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then t=manual
          elif [ $day -ge 1 ] && [ $day -le 5 ]; then t=production_frequent
          elif [ $day -eq 0 ] || [ $day -eq 6 ]; then t=weekend_maintenance
          else t=scheduled; fi
          if [ $day -eq 1 ] && [ $hour -eq 23 ]; then t=weekly_comprehensive; fi
          echo "execution_type=$t" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
      - name: Generate reports
        if: steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        env:
          SMARTSHEET_API_TOKEN: ${{ secrets.SMARTSHEET_API_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          ENVIRONMENT: production
          RELEASE: ${{ github.sha }}
          TEST_MODE: ${{ github.event.inputs.test_mode }}
          FORCE_GENERATION: ${{ github.event.inputs.force_generation }}
          EXECUTION_TYPE: ${{ steps.exec.outputs.execution_type }}
          # Performance optimizations for GitHub Actions
          QUIET_LOGGING: 'false'
          USE_DISCOVERY_CACHE: 'true'
          DISCOVERY_CACHE_TTL_MIN: '60'
          PER_CELL_DEBUG_ENABLED: 'false'
          DEBUG_SAMPLE_ROWS: '1'
          LOG_UNKNOWN_COLUMNS: 'false'
        run: python generate_weekly_pdfs.py
      - name: Cleanup only
        if: steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only == 'true'
        run: |
          python cleanup_excels.py
      - name: Upload artifacts
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: excel-reports-${{ steps.exec.outputs.execution_type }}-${{ github.run_number }}
          path: generated_docs/
          retention-days: 15
      - name: Summary
        if: always()
        run: |
          echo "Execution Type: ${{ steps.exec.outputs.execution_type }}"
          echo "Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "Cleanup Only: ${{ github.event.inputs.cleanup_only }}"
          if [ -d generated_docs ]; then ls -1 generated_docs | head -n 25; fi
