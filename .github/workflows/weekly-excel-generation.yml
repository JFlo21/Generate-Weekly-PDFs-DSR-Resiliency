name: Comprehensive Excel Generation with Enhanced Sentry Monitoring (Every 2 Hours + Weekly)

on:
  schedule:
    # Production billing system - Run every 2 hours during business hours (Monday-Friday)
    # 7 AM - 7 PM CST (13:00 - 01:00 UTC next day) for real-time billing updates
    - cron: '0 13,15,17,19,21,23,1 * * 1-5'  # Every 2 hours Mon-Fri business hours CST
    
    # Weekend reduced frequency - Every 4 hours (Saturday-Sunday)
    # 9 AM, 1 PM, 5 PM CST (15:00, 19:00, 23:00 UTC) for weekend coverage
    - cron: '0 15,19,23 * * 0,6'  # Every 4 hours weekends CST
    
    # Weekly comprehensive report - Sunday at 11 PM CST (Monday 5 AM UTC)
    # This ensures complete weekly reports capture the full work week (Monday-Sunday)
    - cron: '0 5 * * 1'   # Weekly comprehensive on Monday at 5 AM UTC (Sunday 11 PM CST)
  
  # Allow manual triggering for testing and immediate report generation
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (true/false) - Production mode will upload to Smartsheet'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'
      force_generation:
        description: 'Force generate reports even if no eligible data found'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'
      enable_ai_analysis:
        description: 'Enable AI analysis and insights (may increase runtime)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'

env:
  # Central Time Zone for logging purposes
  TZ: America/Chicago

jobs:
  comprehensive-excel-generation:
    runs-on: ubuntu-latest
    
    # Optimized timeout for production billing system with enhanced monitoring
    timeout-minutes: 20  # Reduced for frequent runs while allowing sufficient time for processing
    
    # Environment variables for comprehensive system
    env:
      PYTHONUNBUFFERED: 1
      TF_CPP_MIN_LOG_LEVEL: 3  # Suppress TensorFlow warnings for cleaner logs
      OMP_NUM_THREADS: 4       # Optimize for 4-core GitHub runner
      OPENBLAS_NUM_THREADS: 4  # Optimize NumPy operations for CPU
      # Production system control variables
      GITHUB_ACTIONS: 'true'
      ENABLE_HEAVY_AI: ${{ github.event.inputs.enable_ai_analysis || 'false' }}
      SKIP_CELL_HISTORY: 'true'  # API resilience - skip problematic calls in GitHub Actions
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache Python Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-comprehensive-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-comprehensive-
          ${{ runner.os }}-pip-
        
    - name: Install System Dependencies
      run: |
        echo "🔧 Installing Comprehensive Excel Generation System Dependencies..."
        python -m pip install --upgrade pip
        
        # Install based on AI mode preference
        if [ "${{ github.event.inputs.enable_ai_analysis }}" = "true" ]; then
          echo "🧠 Full Mode: Installing complete system with AI capabilities"
          pip install -r requirements.txt
          echo "✅ Full System Installed:"
          echo "   • Complete Excel generation with enhanced formatting"
          echo "   • Advanced error monitoring with Sentry integration"
          echo "   • AI-powered insights and anomaly detection"
          echo "   • Comprehensive grouping logic validation"
        else
          echo "⚡ Standard Mode: Installing optimized dependencies for maximum reliability"
          pip install -r requirements-ultralight.txt
          
          echo "✅ Standard System Installed:"
          echo "   • Essential Excel generation and Smartsheet integration"
          echo "   • Enhanced Sentry monitoring with detailed error context"
          echo "   • Critical grouping logic validation and protection"
          echo "   • Optimized for reliability and speed"
        fi
        
        # Verify core system components
        python -c "import sentry_sdk; print('✅ Sentry monitoring ready')"
        python -c "import smartsheet; print('✅ Smartsheet integration ready')"
        python -c "import openpyxl; print('✅ Excel generation ready')"
        
    - name: Verify System Time and Execution Context
      run: |
        echo "Current UTC time: $(date -u)"
        echo "Current Central time: $(TZ=America/Chicago date)"
        echo "Execution mode: Weekly comprehensive Excel generation"
        
    - name: Check Execution Conditions
      id: execution_check
      run: |
        # Get current time info in Central Time
        current_day=$(TZ=America/Chicago date +%w)
        current_hour=$(TZ=America/Chicago date +%H)
        current_date=$(TZ=America/Chicago date +%Y-%m-%d)
        
        echo "Current day of week: $current_day (0=Sunday, 1=Monday)"
        echo "Current hour (Central): $current_hour"
        echo "Current date: $current_date"
        
        # Determine execution type based on schedule
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "🔧 Manual trigger - executing comprehensive generation"
          echo "execution_type=manual" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
        elif [ "$current_day" -ge 1 ] && [ "$current_day" -le 5 ]; then
          # Monday-Friday: Business hours every 2 hours
          echo "⚡ Business hours production run - every 2 hours for real-time billing"
          echo "execution_type=production_frequent" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
        elif [ "$current_day" -eq 0 ] || [ "$current_day" -eq 6 ]; then
          # Weekend: Every 4 hours
          echo "📅 Weekend maintenance run - every 4 hours for coverage"
          echo "execution_type=weekend_maintenance" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
        elif [ "$current_day" -eq 1 ] && [ "$current_hour" -eq 23 ]; then
          # Weekly comprehensive report (Sunday 11 PM CST = Monday 5 AM UTC)
          echo "📊 Weekly comprehensive report generation"
          echo "execution_type=weekly_comprehensive" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "⏰ Scheduled execution - real-time billing system"
          echo "execution_type=scheduled" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
        fi
        
        echo "run_id=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT
        
    - name: Set Production Mode
      if: steps.execution_check.outputs.should_run == 'true' && github.event.inputs.test_mode != 'true'
      run: |
        # Set TEST_MODE to False for production runs
        sed -i 's/TEST_MODE = True/TEST_MODE = False/' generate_weekly_pdfs.py
        echo "✅ Set to PRODUCTION mode - files will be generated and uploaded to Smartsheet"
        echo "🔍 Enhanced Sentry monitoring active for production error tracking"
        
    - name: Keep Test Mode
      if: github.event.inputs.test_mode == 'true'
      run: |
        echo "🧪 Keeping TEST_MODE = True for test run"
        echo "Files will be generated locally but NOT uploaded to Smartsheet"
        echo "🔍 Sentry monitoring will track test execution for debugging"
        
    - name: Production Excel Generation with Enhanced Sentry Monitoring (Every 2 Hours + Weekly)
      if: steps.execution_check.outputs.should_run == 'true'
      env:
        # GitHub Secrets - DO NOT put actual values here
        SMARTSHEET_API_TOKEN: ${{ secrets.SMARTSHEET_API_TOKEN }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        AUDIT_SHEET_ID: ${{ secrets.AUDIT_SHEET_ID }}
        # System configuration
        GITHUB_ACTIONS: 'true'
        ENABLE_HEAVY_AI: ${{ github.event.inputs.enable_ai_analysis || 'false' }}
        SKIP_CELL_HISTORY: 'true'  # Skip cell history API calls for reliability
        ENVIRONMENT: 'production'
        RELEASE: ${{ github.sha }}
        FORCE_GENERATION: ${{ github.event.inputs.force_generation || 'false' }}
        EXECUTION_TYPE: ${{ steps.execution_check.outputs.execution_type }}
      run: |
        echo "🔍 Starting Production Excel Generation System..."
        echo "===================================================================================="
        
        # Display execution type specific information
        case "${{ steps.execution_check.outputs.execution_type }}" in
          "production_frequent")
            echo "⚡ PRODUCTION FREQUENT RUN (Every 2 Hours - Business Days)"
            echo "🎯 PURPOSE: Real-time billing system updates for customer responsiveness"
            echo "📅 SCHEDULE: Monday-Friday, 7 AM - 7 PM CST (every 2 hours)"
            echo "🔄 FREQUENCY: High-frequency updates for production billing needs"
            ;;
          "weekend_maintenance")
            echo "📅 WEEKEND MAINTENANCE RUN (Every 4 Hours - Weekends)"
            echo "🎯 PURPOSE: Weekend coverage for continuous system operation"
            echo "📅 SCHEDULE: Saturday-Sunday, 9 AM, 1 PM, 5 PM CST"
            echo "🔄 FREQUENCY: Reduced frequency for weekend maintenance"
            ;;
          "weekly_comprehensive")
            echo "📊 WEEKLY COMPREHENSIVE REPORT (Sunday 11 PM CST)"
            echo "🎯 PURPOSE: Complete weekly reporting and data archival"
            echo "📅 SCHEDULE: Sunday nights for full week capture"
            echo "🔄 FREQUENCY: Weekly comprehensive analysis"
            ;;
          "manual")
            echo "🔧 MANUAL EXECUTION"
            echo "🎯 PURPOSE: On-demand testing and immediate report generation"
            echo "🔄 FREQUENCY: User-initiated"
            ;;
          *)
            echo "⏰ SCHEDULED PRODUCTION RUN"
            echo "🎯 PURPOSE: Real-time billing system operation"
            ;;
        esac
        
        echo ""
        echo "🎯 ENHANCED SYSTEM FEATURES:"
        echo "   • Advanced Sentry monitoring with detailed line-specific error reporting"
        echo "   • Critical grouping logic validation and protection"
        echo "   • Professional Excel generation with enhanced formatting"
        echo "   • Bulletproof one-work-request-per-file grouping enforcement"
        echo "   • Real-time error detection with exact source location tracking"
        echo ""
        echo "🔒 CRITICAL BUSINESS LOGIC PROTECTION:"
        echo "   • Each Excel file contains ONLY one work request per week ending date"
        echo "   • Comprehensive validation prevents grouping logic regression"
        echo "   • Immediate Sentry alerting for any violations of business rules"
        echo "   • Enhanced debugging with exact line numbers and context"
        echo ""
        echo "📊 PRODUCTION BILLING SYSTEM ARCHITECTURE:"
        echo "   • Phase 1: Secure data discovery with API resilience"
        echo "   • Phase 2: Protected grouping with real-time validation"
        echo "   • Phase 3: Professional Excel generation with monitoring"
        echo "   • Phase 4: Smartsheet upload with comprehensive error tracking"
        echo ""
        echo "Current execution time: $(TZ=America/Chicago date)"
        
        # Verify required secrets
        if [ -z "$SMARTSHEET_API_TOKEN" ]; then
          echo "❌ ERROR: SMARTSHEET_API_TOKEN secret not found"
          echo "Please add your Smartsheet API token as a repository secret"
          echo "Go to: Repository Settings → Secrets and variables → Actions → New repository secret"
          echo "Name: SMARTSHEET_API_TOKEN"
          echo "Value: [Your Smartsheet API token]"
          exit 1
        fi
        
        if [ -z "$SENTRY_DSN" ]; then
          echo "⚠️ WARNING: SENTRY_DSN secret not found"
          echo "Enhanced error monitoring will be disabled"
          echo "To enable full monitoring capabilities:"
          echo "1. Create a Sentry account at https://sentry.io"
          echo "2. Create a new project for error monitoring"
          echo "3. Copy the DSN from your Sentry project settings"
          echo "4. Add SENTRY_DSN as a GitHub repository secret"
          echo "Go to: Repository Settings → Secrets and variables → Actions → New repository secret"
          echo "Name: SENTRY_DSN"
          echo "Value: [Your Sentry DSN URL]"
        else
          echo "✅ SENTRY_DSN configured - Enhanced error monitoring with line-specific reporting enabled"
        fi
        
        # Execute the comprehensive system
        echo "🚀 Executing Comprehensive Excel Generation System..."
        echo "📋 Running with enhanced Sentry monitoring and grouping logic protection"
        
        # Run the main system with comprehensive monitoring
        python generate_weekly_pdfs.py
        
        # Log completion with comprehensive summary
        echo "✅ Comprehensive Excel generation system completed at $(TZ=America/Chicago date)"
        echo "🔍 MONITORING: Enhanced Sentry tracking with detailed error context"
        echo "📊 EXCEL: Professional reports with protected grouping logic"
        echo "🛡️ VALIDATION: Critical business rules monitored and enforced"
        echo "⚡ RELIABILITY: Optimized for GitHub Actions stability"
        
    - name: Upload Generated Excel Reports
      if: always() && steps.execution_check.outputs.should_run == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: excel-reports-${{ steps.execution_check.outputs.execution_type }}-${{ github.run_number }}
        path: generated_docs/
        retention-days: 15  # Reduced retention for frequent runs
        
    - name: Log Production System Execution Summary
      if: always()
      run: |
        echo "🎯 PRODUCTION EXCEL GENERATION SYSTEM SUMMARY"
        echo "=============================================="
        echo "Trigger: ${{ github.event_name }}"
        echo "Execution Type: ${{ steps.execution_check.outputs.execution_type }}"
        echo "Time: $(TZ=America/Chicago date)"
        echo "Should run: ${{ steps.execution_check.outputs.should_run }}"
        echo "Test mode: ${{ github.event.inputs.test_mode }}"
        echo "AI Analysis: ${{ github.event.inputs.enable_ai_analysis }}"
        echo ""
        echo "🚀 PRODUCTION BILLING SYSTEM SCHEDULE:"
        echo "⚡ Business Hours: Every 2 hours (Mon-Fri, 7 AM - 7 PM CST)"
        echo "📅 Weekends: Every 4 hours (Sat-Sun, 9 AM, 1 PM, 5 PM CST)"
        echo "📊 Weekly Reports: Sunday 11 PM CST (comprehensive)"
        echo ""
        echo "🚀 ENHANCED SYSTEM FEATURES EXECUTED:"
        echo "✅ ENHANCED SENTRY: Line-specific error reporting with detailed context"
        echo "✅ GROUPING PROTECTION: Critical business logic validation and monitoring"
        echo "✅ EXCEL GENERATION: Professional reports with advanced formatting"
        echo "✅ SMARTSHEET INTEGRATION: Reliable uploads with error resilience"
        echo "✅ REAL-TIME MONITORING: Immediate alerts for any system violations"
        echo "⚡ Performance: Optimized for frequent production runs and GitHub Actions reliability"
        echo ""
        
        if [ -d "generated_docs" ]; then
          echo "📁 Comprehensive system generated files:"
          file_count=$(find generated_docs/ -name "*.xlsx" -type f | wc -l)
          echo "   📊 Excel Reports: $file_count (with enhanced Sentry monitoring)"
          echo "   🔍 Grouping Validation: Protected against business logic regression"
          echo "   🎯 Error Tracking: Detailed line-specific debugging information"
          echo "   🛡️ Business Rules: Enforced with real-time monitoring"
          ls -la generated_docs/ 2>/dev/null || echo "Directory access limited"
        else
          echo "❌ No generated_docs directory found - check system execution"
        fi
        
        echo ""
        echo "🔒 BUSINESS LOGIC PROTECTION: One work request per Excel file enforced"
        echo "🚀 PRODUCTION READY: Real-time billing system with every-2-hour updates"
        echo "⚡ FREQUENCY: High-frequency business hours + weekend maintenance + weekly comprehensive"

    - name: Skip Execution
      if: steps.execution_check.outputs.should_run != 'true' && github.event_name != 'workflow_dispatch'
      run: |
        echo "⏭️ No execution needed at this time"
        echo "Production billing system runs:"
        echo "   ⚡ Every 2 hours during business hours (Mon-Fri)"
        echo "   📅 Every 4 hours on weekends"
        echo "   📊 Weekly comprehensive reports (Sunday nights)"
