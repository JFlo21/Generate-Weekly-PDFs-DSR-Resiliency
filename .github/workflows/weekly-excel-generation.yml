name: AI-Powered Excel Generation & Advanced Billing Audit System

on:
  schedule:
    # Run every 2 hours, every day to check for data updates and audit changes
    # Runs at: 12 AM, 2 AM, 4 AM, 6 AM, 8 AM, 10 AM, 12 PM, 2 PM, 4 PM, 6 PM, 8 PM, 10 PM UTC
    - cron: '0 */2 * * *'   # Every 2 hours throughout the day
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (true/false) - Production mode will upload to Smartsheet & run AI audit'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'

env:
  # Central Time Zone for logging purposes
  TZ: America/Chicago

jobs:
  generate-reports-and-audit:
    runs-on: ubuntu-latest  # GitHub-hosted runner with 4 CPU cores, 16GB RAM - suitable for AI processing
    
    # Increase timeout for comprehensive AI processing of all 7,503 rows
    timeout-minutes: 120  # 2 hours - adequate for full dataset analysis
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install AI/ML dependencies
      run: |
        echo "ü§ñ Installing Maximum AI/ML Stack..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ Installed AI Stack:"
        echo "   ‚Ä¢ TensorFlow (LSTM, Autoencoder, CNN, Deep Classifier)"
        echo "   ‚Ä¢ PyTorch (Graph NN, Transformer, Variational AE)"
        echo "   ‚Ä¢ Scikit-Learn (Random Forest, Isolation Forest)"
        echo "   ‚Ä¢ NetworkX (Graph Analysis)"
        echo "   ‚Ä¢ Transformers (NLP Processing)"
        echo "   ‚Ä¢ Seaborn + Matplotlib (AI-Enhanced Visualizations)"
        echo "   ‚Ä¢ psutil (System Monitoring for IT Analytics)"
        
    - name: Verify Current Time (Central)
      run: |
        echo "Current UTC time: $(date -u)"
        echo "Current Central time: $(TZ=America/Chicago date)"
        echo "Execution mode: Continuous monitoring every 2 hours"
        
    - name: Check execution conditions
      id: time_check
      run: |
        # Get current time info in Central Time
        current_day=$(TZ=America/Chicago date +%w)
        current_hour=$(TZ=America/Chicago date +%H)
        current_date=$(TZ=America/Chicago date +%Y-%m-%d)
        
        echo "Current day of week: $current_day (0=Sunday)"
        echo "Current hour (Central): $current_hour"
        echo "Current date: $current_date"
        
        # Always run for continuous monitoring (every 2 hours)
        # This ensures Excel files are updated whenever source data changes
        echo "‚úÖ Continuous execution mode - checking for data updates every 2 hours"
        echo "should_run=true" >> $GITHUB_OUTPUT
        echo "run_id=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT
        
        # Set execution context
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "üîß Manual trigger"
        else
          echo "‚è∞ Scheduled execution (every 2 hours)"
        fi
        
    - name: Check for data changes (smart execution)
      id: data_check
      if: steps.time_check.outputs.should_run == 'true' && github.event_name == 'schedule'
      run: |
        run_id="${{ steps.time_check.outputs.run_id }}"
        echo "Checking for data changes at: $run_id"
        
        # Always allow execution for continuous monitoring
        # The script itself will determine if there are actual changes to process
        echo "allow_run=true" >> $GITHUB_OUTPUT
        echo "‚úÖ Proceeding with data check and Excel generation"
        
    - name: Set Production Mode
      if: (steps.time_check.outputs.should_run == 'true' && github.event_name == 'schedule') || github.event.inputs.test_mode == 'false'
      run: |
        # Set TEST_MODE to False for production runs (scheduled runs or manual production mode)
        sed -i 's/TEST_MODE = True/TEST_MODE = False/' generate_weekly_pdfs.py
        echo "‚úÖ Set to PRODUCTION mode - files will be generated and uploaded to Smartsheet"
        
    - name: Keep Test Mode (if manual test)
      if: github.event.inputs.test_mode == 'true'
      run: |
        echo "üß™ Keeping TEST_MODE = True for manual test run"
        echo "Files will be generated locally but NOT uploaded to Smartsheet"
        
    - name: Generate AI-Powered Excel Reports
      if: (steps.time_check.outputs.should_run == 'true') && (steps.data_check.outputs.allow_run == 'true' || github.event_name == 'workflow_dispatch')
      env:
        SMARTSHEET_API_TOKEN: ${{ secrets.SMARTSHEET_API_TOKEN }}
        AUDIT_SHEET_ID: ${{ secrets.AUDIT_SHEET_ID }}
      run: |
        echo "üöÄ Starting AI-powered Excel report generation..."
        echo "ü§ñ AI Features Active:"
        echo "   ‚Ä¢ 7 Neural Networks for pattern analysis"
        echo "   ‚Ä¢ Real-time anomaly detection"
        echo "   ‚Ä¢ AI-enhanced Seaborn visualizations"
        echo "   ‚Ä¢ Intelligent risk assessment"
        echo "   ‚Ä¢ Professional multi-sheet reports"
        echo "Current time: $(TZ=America/Chicago date)"
        echo "Checking for data updates and generating AI-enhanced Excel files..."
        
        # Verify API token is available
        if [ -z "$SMARTSHEET_API_TOKEN" ]; then
          echo "‚ùå ERROR: SMARTSHEET_API_TOKEN secret not found"
          echo "Please add your Smartsheet API token as a repository secret named 'SMARTSHEET_API_TOKEN'"
          exit 1
        fi
        
        # Verify audit sheet ID is available
        if [ -z "$AUDIT_SHEET_ID" ]; then
          echo "‚ö†Ô∏è  WARNING: AUDIT_SHEET_ID secret not found"
          echo "Audit functionality will be disabled during Excel generation"
          echo "To enable audit features, add your audit sheet ID as a repository secret named 'AUDIT_SHEET_ID'"
        else
          echo "‚úÖ AUDIT_SHEET_ID configured for integrated audit monitoring"
        fi
        
        # Run the AI-powered report generation script
        python generate_weekly_pdfs.py
        
        # Log completion
        echo "‚úÖ AI-enhanced Excel generation completed at $(TZ=America/Chicago date)"
        echo "üìä Reports include: Executive Summary, Violation Details, Biller Guidance, AI Analytics, IT System Analytics"
        
    - name: Run Advanced AI Billing Audit System
      if: (steps.time_check.outputs.should_run == 'true') && (steps.data_check.outputs.allow_run == 'true' || github.event_name == 'workflow_dispatch')
      env:
        SMARTSHEET_API_TOKEN: ${{ secrets.SMARTSHEET_API_TOKEN }}
        AUDIT_SHEET_ID: ${{ secrets.AUDIT_SHEET_ID }}
      run: |
        echo "üîç Starting advanced AI billing audit system..."
        echo "ü§ñ AI Audit Features:"
        echo "   ‚Ä¢ 7 Neural Networks analyzing patterns"
        echo "   ‚Ä¢ TensorFlow + PyTorch deep learning"
        echo "   ‚Ä¢ Real-time anomaly detection"
        echo "   ‚Ä¢ Graph network analysis"
        echo "   ‚Ä¢ AI-enhanced Seaborn charts"
        echo "   ‚Ä¢ IT system analytics monitoring"
        echo "Current time: $(TZ=America/Chicago date)"
        echo "Analyzing for unauthorized historical data changes with maximum AI power..."
        
        # Verify API token is available (same as Excel generation)
        if [ -z "$SMARTSHEET_API_TOKEN" ]; then
          echo "‚ùå ERROR: SMARTSHEET_API_TOKEN secret not found"
          echo "AI audit system requires the same API token as Excel generation"
          exit 1
        fi
        
        # Verify audit sheet ID is available
        if [ -z "$AUDIT_SHEET_ID" ]; then
          echo "‚ùå ERROR: AUDIT_SHEET_ID secret not found"
          echo "Please add your audit sheet ID as a repository secret named 'AUDIT_SHEET_ID'"
          echo "This is required for the AI audit system to log violations and changes"
          exit 1
        else
          echo "‚úÖ AUDIT_SHEET_ID configured for advanced AI audit monitoring"
        fi
        
        # Run the AI-powered audit system
        python audit_billing_changes.py
        
        # Log audit completion
        echo "‚úÖ AI-powered billing audit completed at $(TZ=America/Chicago date)"
        echo "üîí Advanced historical data protection monitoring active"
        echo "üß† 7 neural networks continuously analyzing for suspicious patterns"
        
    - name: Upload AI-Enhanced Reports (Archive for Production Records)
      if: (steps.time_check.outputs.should_run == 'true' && github.event_name == 'schedule') || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'false')
      uses: actions/upload-artifact@v4
      with:
        name: ai-powered-excel-reports-${{ github.run_number }}
        path: generated_docs/
        retention-days: 400  # GitHub maximum (13+ months) - Smartsheet provides permanent storage
        
    - name: Log AI System Execution Summary
      if: always()
      run: |
        echo "ü§ñ AI-POWERED EXECUTION SUMMARY"
        echo "==============================="
        echo "Trigger: ${{ github.event_name }}"
        echo "Time: $(TZ=America/Chicago date)"
        echo "Should run: ${{ steps.time_check.outputs.should_run }}"
        echo "Test mode: ${{ github.event.inputs.test_mode }}"
        echo ""
        echo "üß† AI SYSTEMS EXECUTED:"
        echo "‚úÖ Excel Generation: 7 neural networks + AI-enhanced Seaborn charts"
        echo "üîç Billing Audit: Advanced pattern detection with TensorFlow + PyTorch"
        echo "üìä IT Analytics: Real-time system monitoring & performance tracking"
        echo "üéØ Deep Learning: LSTM, CNN, Transformers, Graph Networks active"
        echo ""
        
        if [ -d "generated_docs" ]; then
          echo "üìÅ AI-generated files:"
          file_count=$(find generated_docs/ -name "*.xlsx" -type f | wc -l)
          echo "   üìä Excel Reports: $file_count (with 5-sheet comprehensive analysis)"
          echo "   ü§ñ AI Features: Neural network insights, anomaly detection, IT monitoring"
          ls -la generated_docs/ || echo "Directory access limited"
        else
          echo "‚ùå No generated_docs directory found - check AI system execution"
        fi
        
        echo ""
        echo "üîí AI COMPLIANCE STATUS: Maximum power audit system monitoring active"
        echo "üöÄ PRODUCTION READY: Continuous AI operation every 2 hours"

    - name: Skip Execution (Not Needed)
      if: steps.time_check.outputs.should_run == 'false' && github.event_name != 'workflow_dispatch'
      run: |
        echo "‚è≠Ô∏è  No execution needed at this time"
        echo "Script runs every 2 hours to check for data updates"
