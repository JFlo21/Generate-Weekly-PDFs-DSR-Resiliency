name: Weekly Excel Generation with Sentry Monitoring (Every 2 Hours + Weekly)

permissions:
  contents: read

on:
  schedule:
    - cron: '0 13,15,17,19,21,23,1 * * 1-5'
    - cron: '0 15,19,23 * * 0,6'
    - cron: '0 5 * * 1'
  workflow_dispatch:
    inputs:
      # Basic Operation Controls
      test_mode:
        description: 'Run in test mode (true/false)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      force_generation:
        description: 'Force generate even if no eligible data'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      cleanup_only:
        description: 'Only cleanup stale Excel files (no generation)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      
      # Debug & Logging Mode
      debug_mode:
        description: 'Enable debug logging (per-cell, filter diagnostics, foreman diagnostics)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      quiet_logging:
        description: 'Enable quiet logging (reduces output)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      
      # Performance Settings
      use_discovery_cache:
        description: 'Use discovery cache for faster processing'
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      extended_change_detection:
        description: 'Enable extended change detection (includes foreman, dept, etc.)'
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      
      # Reset Options
      reset_hash_history:
        description: 'Reset hash history and regenerate all files'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      
      # Advanced Filters
      wr_filter:
        description: 'Comma-separated list of Work Request numbers to process (empty = all)'
        required: false
        default: ''
        type: string
      advanced_options:
        description: 'Advanced: max_groups:X,regen_weeks:MMDDYY1;MMDDYY2,reset_wr_list:WR1;WR2'
        required: false
        default: ''
        type: string

env:
  TZ: America/Chicago

jobs:
  core:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTHONUNBUFFERED: 1
      GITHUB_ACTIONS: 'true'
      SKIP_CELL_HISTORY: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Determine execution type
        id: exec
        run: |
          day=$(TZ=America/Chicago date +%w)
          hour=$(TZ=America/Chicago date +%H)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then t=manual
          elif [ $day -ge 1 ] && [ $day -le 5 ]; then t=production_frequent
          elif [ $day -eq 0 ] || [ $day -eq 6 ]; then t=weekend_maintenance
          else t=scheduled; fi
          if [ $day -eq 1 ] && [ $hour -eq 23 ]; then t=weekly_comprehensive; fi
          echo "execution_type=$t" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
      - name: Parse advanced options
        if: github.event.inputs.advanced_options != ''
        run: |
          echo "Parsing advanced options: ${{ github.event.inputs.advanced_options }}"
          # Parse advanced_options format: max_groups:X,regen_weeks:MMDDYY1;MMDDYY2,reset_wr_list:WR1;WR2
          OPTIONS="${{ github.event.inputs.advanced_options }}"
          for option in $(echo $OPTIONS | tr ',' '\n'); do
            key=$(echo $option | cut -d':' -f1)
            value=$(echo $option | cut -d':' -f2-)
            case $key in
              max_groups) echo "MAX_GROUPS=$value" >> $GITHUB_ENV ;;
              regen_weeks) echo "REGEN_WEEKS=$(echo $value | tr ';' ',')" >> $GITHUB_ENV ;;
              reset_wr_list) echo "RESET_WR_LIST=$(echo $value | tr ';' ',')" >> $GITHUB_ENV ;;
            esac
          done
      - name: Generate reports
        if: steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        env:
          SMARTSHEET_API_TOKEN: ${{ secrets.SMARTSHEET_API_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          ENVIRONMENT: production
          RELEASE: ${{ github.sha }}
          EXECUTION_TYPE: ${{ steps.exec.outputs.execution_type }}
          
          # Basic Operation Controls
          TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
          FORCE_GENERATION: ${{ github.event.inputs.force_generation || 'false' }}
          
          # Logging & Debug Controls (consolidated)
          QUIET_LOGGING: ${{ github.event.inputs.quiet_logging || 'false' }}
          PER_CELL_DEBUG_ENABLED: ${{ github.event.inputs.debug_mode || 'false' }}
          LOG_UNKNOWN_COLUMNS: ${{ github.event.inputs.debug_mode || 'false' }}
          FILTER_DIAGNOSTICS: ${{ github.event.inputs.debug_mode || 'false' }}
          FOREMAN_DIAGNOSTICS: ${{ github.event.inputs.debug_mode || 'false' }}
          
          # Performance & Caching
          USE_DISCOVERY_CACHE: ${{ github.event.inputs.use_discovery_cache || 'true' }}
          DISCOVERY_CACHE_TTL_MIN: '60'
          SKIP_CELL_HISTORY: 'true'
          
          # Change Detection & History
          EXTENDED_CHANGE_DETECTION: ${{ github.event.inputs.extended_change_detection || 'true' }}
          HISTORY_SKIP_ENABLED: 'true'
          ATTACHMENT_REQUIRED_FOR_SKIP: 'true'
          KEEP_HISTORICAL_WEEKS: 'false'
          
          # Reset & Cleanup Options
          RESET_HASH_HISTORY: ${{ github.event.inputs.reset_hash_history || 'false' }}
          
          # Advanced Filters
          WR_FILTER: ${{ github.event.inputs.wr_filter || '' }}
          ADVANCED_OPTIONS: ${{ github.event.inputs.advanced_options || '' }}
          
          # Debug Limits (optimized for Actions)
          DEBUG_SAMPLE_ROWS: '1'
          DEBUG_ESSENTIAL_ROWS: '3'
          UNMAPPED_COLUMN_SAMPLE_LIMIT: '3'
        run: python generate_weekly_pdfs.py
      
      - name: Cleanup only
        if: steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only == 'true'
        run: |
          python cleanup_excels.py
      
      # ==================== ARTIFACT PRESERVATION SYSTEM ====================
      # Comprehensive artifact storage with organized naming, manifest generation,
      # and secure cloud storage following GitHub best practices
      # =====================================================================
      
      - name: Generate artifact manifest
        id: manifest
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        run: |
          echo "üì¶ Generating comprehensive artifact manifest..."
          python scripts/generate_artifact_manifest.py generated_docs artifact_manifest.json
          
          # Extract summary for workflow outputs
          if [ -f generated_docs/artifact_manifest.json ]; then
            total_files=$(jq -r '.summary.total_files // 0' generated_docs/artifact_manifest.json)
            total_size=$(jq -r '.summary.total_size_mb // 0' generated_docs/artifact_manifest.json)
            wr_count=$(jq -r '.summary.work_requests | length' generated_docs/artifact_manifest.json)
            week_count=$(jq -r '.summary.week_endings | length' generated_docs/artifact_manifest.json)
            
            echo "total_files=$total_files" >> $GITHUB_OUTPUT
            echo "total_size_mb=$total_size" >> $GITHUB_OUTPUT
            echo "wr_count=$wr_count" >> $GITHUB_OUTPUT
            echo "week_count=$week_count" >> $GITHUB_OUTPUT
            
            echo "‚úÖ Manifest generated successfully"
            echo "   üìä Files: $total_files | Size: ${total_size}MB | WRs: $wr_count | Weeks: $week_count"
          else
            echo "‚ö†Ô∏è Manifest file not found"
            echo "total_files=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Organize artifacts by Work Request
        id: organize
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        run: |
          echo "üóÇÔ∏è Organizing artifacts by Work Request for easy discovery..."
          mkdir -p artifact_staging/by_wr artifact_staging/by_week artifact_staging/manifest
          
          # Copy manifest to dedicated folder
          if [ -f generated_docs/artifact_manifest.json ]; then
            cp generated_docs/artifact_manifest.json artifact_staging/manifest/
          fi
          
          # Organize Excel files by WR number for individual artifact uploads
          for file in generated_docs/WR_*.xlsx; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              # Extract WR number from filename (format: WR_{number}_WeekEnding_...)
              wr_number=$(echo "$filename" | cut -d'_' -f2)
              week_ending=$(echo "$filename" | cut -d'_' -f4)
              
              # Create WR-specific folder
              mkdir -p "artifact_staging/by_wr/WR_${wr_number}"
              cp "$file" "artifact_staging/by_wr/WR_${wr_number}/"
              
              # Create week-specific folder
              mkdir -p "artifact_staging/by_week/Week_${week_ending}"
              cp "$file" "artifact_staging/by_week/Week_${week_ending}/"
            fi
          done
          
          # Count organized artifacts
          wr_folders=$(find artifact_staging/by_wr -mindepth 1 -maxdepth 1 -type d | wc -l)
          week_folders=$(find artifact_staging/by_week -mindepth 1 -maxdepth 1 -type d | wc -l)
          
          echo "organized_wr_count=$wr_folders" >> $GITHUB_OUTPUT
          echo "organized_week_count=$week_folders" >> $GITHUB_OUTPUT
          echo "‚úÖ Organized into $wr_folders WR folders and $week_folders week folders"
      
      - name: Upload comprehensive artifact bundle
        id: upload_bundle
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Excel-Reports-Complete-${{ steps.exec.outputs.execution_type }}-Run${{ github.run_number }}
          path: |
            generated_docs/WR_*.xlsx
            generated_docs/artifact_manifest.json
            generated_docs/hash_history.json
            generated_docs/audit_state.json
          retention-days: ${{ github.event.inputs.test_mode == 'true' && '30' || '90' }}
          compression-level: 6
          if-no-files-found: warn
          overwrite: true
      
      - name: Upload manifest artifact
        id: upload_manifest
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Manifest-${{ steps.exec.outputs.execution_type }}-Run${{ github.run_number }}
          path: artifact_staging/manifest/
          retention-days: 90
          compression-level: 9
          if-no-files-found: warn
      
      - name: Upload artifacts by Work Request
        id: upload_by_wr
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true' && steps.organize.outputs.organized_wr_count > 0
        uses: actions/upload-artifact@v4
        with:
          name: By-WorkRequest-${{ steps.exec.outputs.execution_type }}-Run${{ github.run_number }}
          path: artifact_staging/by_wr/
          retention-days: ${{ github.event.inputs.test_mode == 'true' && '30' || '90' }}
          compression-level: 6
          if-no-files-found: warn
      
      - name: Upload artifacts by Week Ending
        id: upload_by_week
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true' && steps.organize.outputs.organized_week_count > 0
        uses: actions/upload-artifact@v4
        with:
          name: By-WeekEnding-${{ steps.exec.outputs.execution_type }}-Run${{ github.run_number }}
          path: artifact_staging/by_week/
          retention-days: ${{ github.event.inputs.test_mode == 'true' && '30' || '90' }}
          compression-level: 6
          if-no-files-found: warn
      
      # ==================== ARTIFACT SUMMARY & VALIDATION ====================
      
      - name: Artifact preservation summary
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        run: |
          echo "# üì¶ Artifact Preservation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ steps.exec.outputs.execution_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Mode**: ${{ github.event.inputs.test_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Files**: ${{ steps.manifest.outputs.total_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size**: ${{ steps.manifest.outputs.total_size_mb }} MB" >> $GITHUB_STEP_SUMMARY
          echo "- **Work Requests**: ${{ steps.manifest.outputs.wr_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Week Endings**: ${{ steps.manifest.outputs.week_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Cloud Storage Organization" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts are preserved in GitHub's secure cloud storage with:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Complete Bundle**: All Excel reports with manifest and audit logs" >> $GITHUB_STEP_SUMMARY
          echo "- üóÇÔ∏è **By Work Request**: Organized folders for each WR number" >> $GITHUB_STEP_SUMMARY
          echo "- üìÖ **By Week Ending**: Organized folders for each billing week" >> $GITHUB_STEP_SUMMARY
          echo "- üìã **Manifest**: Comprehensive JSON index with SHA256 validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Artifact Details" >> $GITHUB_STEP_SUMMARY
          if [ -f generated_docs/artifact_manifest.json ]; then
            echo "### Work Request Numbers" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r '.summary.work_requests | join(", ")' generated_docs/artifact_manifest.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### Week Endings" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r '.summary.week_endings | join(", ")' generated_docs/artifact_manifest.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## Retention Policy" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.test_mode }}" == "true" ]; then
            echo "- **Test Mode**: 30 days retention" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Production**: 90 days retention (maximum)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Security**: Requires GitHub authentication to access" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: SHA256 digest for each artifact" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Access Instructions" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts are available in the **Artifacts** section at the bottom of this workflow run." >> $GITHUB_STEP_SUMMARY
          echo "Download options:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Complete Bundle** - All files in one download" >> $GITHUB_STEP_SUMMARY
          echo "2. **By Work Request** - Individual WR folders" >> $GITHUB_STEP_SUMMARY
          echo "3. **By Week Ending** - Weekly billing periods" >> $GITHUB_STEP_SUMMARY
          echo "4. **Manifest** - JSON index with file metadata" >> $GITHUB_STEP_SUMMARY
      
      - name: Summary
        if: always()
        run: |
          echo "============================================"
          echo "üìä WORKFLOW EXECUTION SUMMARY"
          echo "============================================"
          echo "Execution Type: ${{ steps.exec.outputs.execution_type }}"
          echo "Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "Cleanup Only: ${{ github.event.inputs.cleanup_only }}"
          echo ""
          echo "üì¶ ARTIFACT PRESERVATION:"
          echo "  Total Files: ${{ steps.manifest.outputs.total_files }}"
          echo "  Total Size: ${{ steps.manifest.outputs.total_size_mb }} MB"
          echo "  Work Requests: ${{ steps.manifest.outputs.wr_count }}"
          echo "  Week Endings: ${{ steps.manifest.outputs.week_count }}"
          echo ""
          echo "üóÇÔ∏è ORGANIZATION:"
          echo "  WR Folders: ${{ steps.organize.outputs.organized_wr_count }}"
          echo "  Week Folders: ${{ steps.organize.outputs.organized_week_count }}"
          echo ""
          if [ -d generated_docs ]; then 
            echo "üìÑ GENERATED FILES:"
            ls -1 generated_docs/WR_*.xlsx 2>/dev/null | head -n 25
          fi
          echo "============================================"
