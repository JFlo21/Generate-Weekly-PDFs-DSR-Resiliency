name: Weekly Excel Generation with Sentry Monitoring (Every 2 Hours + Weekly)

permissions:
  contents: read

on:
  schedule:
    - cron: '0 13,15,17,19,21,23,1 * * 1-5'
    - cron: '0 15,19,23 * * 0,6'
    - cron: '0 5 * * 1'
  workflow_dispatch:
    inputs:
      # Basic Operation Controls
      test_mode:
        description: 'Run in test mode (true/false)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      force_generation:
        description: 'Force generate even if no eligible data'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      cleanup_only:
        description: 'Only cleanup stale Excel files (no generation)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      
      # Debug & Logging Mode
      debug_mode:
        description: 'Enable debug logging (per-cell, filter diagnostics, foreman diagnostics)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      quiet_logging:
        description: 'Enable quiet logging (reduces output)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      
      # Performance Settings
      use_discovery_cache:
        description: 'Use discovery cache for faster processing'
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      extended_change_detection:
        description: 'Enable extended change detection (includes foreman, dept, etc.)'
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      
      # Reset Options
      reset_hash_history:
        description: 'Reset hash history and regenerate all files'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      
      # Advanced Filters
      wr_filter:
        description: 'Comma-separated list of Work Request numbers to process (empty = all)'
        required: false
        default: ''
        type: string
      advanced_options:
        description: 'Advanced: max_groups:X,regen_weeks:MMDDYY1;MMDDYY2,reset_wr_list:WR1;WR2'
        required: false
        default: ''
        type: string

env:
  TZ: America/Chicago

jobs:
  core:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONUNBUFFERED: 1
      GITHUB_ACTIONS: 'true'
      SKIP_CELL_HISTORY: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Determine execution type
        id: exec
        run: |
          day=$(TZ=America/Chicago date +%w)
          hour=$(TZ=America/Chicago date +%H)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then t=manual
          elif [ $day -ge 1 ] && [ $day -le 5 ]; then t=production_frequent
          elif [ $day -eq 0 ] || [ $day -eq 6 ]; then t=weekend_maintenance
          else t=scheduled; fi
          if [ $day -eq 1 ] && [ $hour -eq 23 ]; then t=weekly_comprehensive; fi
          echo "execution_type=$t" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
      - name: Parse advanced options
        if: github.event.inputs.advanced_options != ''
        run: |
          echo "Parsing advanced options: ${{ github.event.inputs.advanced_options }}"
          # Parse advanced_options format: max_groups:X,regen_weeks:MMDDYY1;MMDDYY2,reset_wr_list:WR1;WR2
          OPTIONS="${{ github.event.inputs.advanced_options }}"
          for option in $(echo $OPTIONS | tr ',' '\n'); do
            key=$(echo $option | cut -d':' -f1)
            value=$(echo $option | cut -d':' -f2-)
            case $key in
              max_groups) echo "MAX_GROUPS=$value" >> $GITHUB_ENV ;;
              regen_weeks) echo "REGEN_WEEKS=$(echo $value | tr ';' ',')" >> $GITHUB_ENV ;;
              reset_wr_list) echo "RESET_WR_LIST=$(echo $value | tr ';' ',')" >> $GITHUB_ENV ;;
            esac
          done
      - name: Generate reports
        if: steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        env:
          SMARTSHEET_API_TOKEN: ${{ secrets.SMARTSHEET_API_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          ENVIRONMENT: production
          RELEASE: ${{ github.sha }}
          EXECUTION_TYPE: ${{ steps.exec.outputs.execution_type }}
          
          # Basic Operation Controls
          TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
          FORCE_GENERATION: ${{ github.event.inputs.force_generation || 'false' }}
          
          # Logging & Debug Controls (consolidated)
          QUIET_LOGGING: ${{ github.event.inputs.quiet_logging || 'false' }}
          PER_CELL_DEBUG_ENABLED: ${{ github.event.inputs.debug_mode || 'false' }}
          LOG_UNKNOWN_COLUMNS: ${{ github.event.inputs.debug_mode || 'false' }}
          FILTER_DIAGNOSTICS: ${{ github.event.inputs.debug_mode || 'false' }}
          FOREMAN_DIAGNOSTICS: ${{ github.event.inputs.debug_mode || 'false' }}
          
          # Performance & Caching
          USE_DISCOVERY_CACHE: ${{ github.event.inputs.use_discovery_cache || 'true' }}
          DISCOVERY_CACHE_TTL_MIN: '60'
          SKIP_CELL_HISTORY: 'true'
          
          # Change Detection & History
          EXTENDED_CHANGE_DETECTION: ${{ github.event.inputs.extended_change_detection || 'true' }}
          HISTORY_SKIP_ENABLED: 'true'
          ATTACHMENT_REQUIRED_FOR_SKIP: 'true'
          KEEP_HISTORICAL_WEEKS: 'false'
          
          # Reset & Cleanup Options
          RESET_HASH_HISTORY: ${{ github.event.inputs.reset_hash_history || 'false' }}
          
          # Advanced Filters
          WR_FILTER: ${{ github.event.inputs.wr_filter || '' }}
          ADVANCED_OPTIONS: ${{ github.event.inputs.advanced_options || '' }}
          
          # Debug Limits (optimized for Actions)
          DEBUG_SAMPLE_ROWS: '1'
          DEBUG_ESSENTIAL_ROWS: '3'
          UNMAPPED_COLUMN_SAMPLE_LIMIT: '3'
        run: python generate_weekly_pdfs.py
      - name: Cleanup only
        if: steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only == 'true'
        run: |
          python cleanup_excels.py
      - name: Upload artifacts
        if: always() && steps.exec.outputs.should_run == 'true' && github.event.inputs.cleanup_only != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: excel-reports-${{ steps.exec.outputs.execution_type }}-${{ github.run_number }}
          path: generated_docs/
          retention-days: 15
      - name: Summary
        if: always()
        run: |
          echo "Execution Type: ${{ steps.exec.outputs.execution_type }}"
          echo "Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "Cleanup Only: ${{ github.event.inputs.cleanup_only }}"
          if [ -d generated_docs ]; then ls -1 generated_docs | head -n 25; fi
