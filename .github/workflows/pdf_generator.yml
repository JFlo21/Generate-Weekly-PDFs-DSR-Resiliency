# A clear, updated name for the workflow
name: Smartsheet PDF and Excel Generation

on:
  schedule:
    # Runs every 2 hours. You can adjust the cron schedule as needed.
    # Example: '0 8 * * *' runs it once a day at 8:00 AM UTC.
    - cron: '0 */2 * * *'
  # Allows you to run the workflow manually from the GitHub Actions tab.
  workflow_dispatch:

# No special permissions are needed as we are no longer committing to the repo or deploying to pages.

jobs:
  # The job is now clearly named for its single purpose.
  run-smartsheet-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # Using a stable, modern version of Python.
          python-version: '3.11'

      # --- CRITICAL CHANGE ---
      # This step now uses a requirements.txt file, which is the best practice.
      # It ensures all dependencies, including the new ones (pandas, openpyxl), are installed.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # The secret verification step is good practice and remains unchanged.
      - name: Verify required secrets are present
        run: |
          if [ -z "${{ secrets.SMARTSHEET_API_TOKEN }}" ] || [ -z "${{ secrets.SOURCE_SHEET_ID }}" ]; then
            echo "ðŸš¨ Required secrets SMARTSHEET_API_TOKEN or SOURCE_SHEET_ID are missing."
            exit 1
          fi

      # --- CORE LOGIC ---
      # This is the main step that executes your Python script.
      - name: Run Smartsheet Generation Script
        env:
          # Securely provides the API token and Sheet ID to the Python script.
          SMARTSHEET_API_TOKEN: ${{ secrets.SMARTSHEET_API_TOKEN }}
          SOURCE_SHEET_ID: ${{ secrets.SOURCE_SHEET_ID }}
        # IMPORTANT: Make sure 'your_script_name.py' matches the actual filename in your repository.
        run: python your_script_name.py
